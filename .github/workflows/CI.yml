# This file is autogenerated by maturin v0.14.17
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  Nix:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64-linux
          - os: ubuntu-latest
            arch: aarch64-linux
          - os: macos-latest
            arch: x86_64-darwin
    name: Build Nix - ${{ matrix.arch }}.${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v20
      - uses: cachix/cachix-action@v12
        with:
          name: lzallright
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Setup emulation
        if: ${{ matrix.arch == 'aarch64-linux' }}
        run: |
          sudo apt update
          sudo apt install -q -y qemu-system-aarch64 qemu-efi binfmt-support qemu-user-static
          mkdir -p ~/.config/nix
          echo "system-features = aarch64-linux arm-linux" | sudo tee -a /etc/nix/nix.conf
      - name: Nix Flake checks
        run: |
          nix flake check \
              --keep-going \
              --print-build-logs \
              --option allow-import-from-derivation true \
              --option system ${{ matrix.arch }} \
              --extra-platforms ${{ matrix.arch }}

  Checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: curl -L https://github.com/mozilla/grcov/releases/download/v0.8.18/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar xjf -
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
      - run: pdm all
        env:
          CARGO_INCREMENTAL: "0"
          CARGO_PROFILE_DEV_DEBUG: "1"
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort"
          RUSTDOCFLAGS: "-Cpanic=abort"
          RUSTC_BOOTSTRAP: "1"
      - run: |
          zip -0 ccov.zip $(find . -name "lz*.gc*")
          ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" -o lcov.info
      - name: Coveralls upload
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: codecov/codecov-action@v3
        with:
          files: lcov.info

  Linux:
    needs: [Checks]
    runs-on: ubuntu-latest
    name: "Linux (${{ matrix.target }}.${{ matrix.tag }})"
    strategy:
      matrix:
        include:
          - target: x86_64
            tag: manylinux2014
            container: quay.io/pypa/manylinux2014_x86_64:latest
          - target: x86
            container: quay.io/pypa/manylinux2014_i686:latest
            tag: manylinux2014
          - target: aarch64
            container: quay.io/pypa/manylinux2014_aarch64:latest
            cross: aarch64
            tag: manylinux2014
          - target: x86_64
            container: quay.io/pypa/musllinux_1_1_x86_64:latest
            tag: musllinux_1_1
            before-script: |
              ln -snf /usr/bin/g++ /usr/bin/x86_64-linux-gnu-g++
          - target: aarch64
            container: quay.io/pypa/musllinux_1_1_aarch64:latest
            cross: aarch64
            tag: musllinux_1_1
            before-script: |
              ln -snf /usr/bin/g++ /usr/bin/aarch64-linux-gnu-g++
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: setup emulation
        if: ${{ matrix.cross }}
        run: |
          sudo apt update
          sudo apt install -q -y qemu-system-${{ matrix.cross }} qemu-efi binfmt-support qemu-user-static
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          container: ${{ matrix.container }}
          before-script-linux: ${{ matrix.before-script }}
          args: --release --out dist --find-interpreter
          sccache: ${{ matrix.target == 'musllinux_1_1' }}
          docker-options: -e CARGO_NET_GIT_FETCH_WITH_CLI=true
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Test wheels
        run: |
          cat << EOF | docker run -v $PWD:/usr/src -i ${{ matrix.container }} sh -ex -
            cd /usr/src
            curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3.10 -
            export PATH=/root/.local/bin:$PATH
            pdm sync -d --no-self -G test
            pdm run python -m ensurepip
            pdm run python -m pip install dist/*.whl
            pdm pytest
          EOF

  Windows:
    needs: [Checks]
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
      - name: Test wheels
        if: ${{ matrix.target == 'x64' }}
        run: |
          pdm sync -d --no-self -G test
          pdm run python -m ensurepip
          pdm run python -m pip install  (get-item .\dist\*.whl).FullName
          pdm pytest

  MacOS:
    needs: [Checks]
    runs-on: macos-latest
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.9"
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
      - name: Test wheels
        if: ${{ matrix.target == 'x86_64' }}
        run: |
          pdm sync -d --no-self -G test
          pdm run python -m ensurepip
          pdm run python -m pip install dist/*.whl
          pdm pytest

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [Nix, Checks, Linux, Windows, MacOS, sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
